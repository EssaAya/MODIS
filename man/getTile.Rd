% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getTile.R
\name{getTile}
\alias{getTile}
\title{Get MODIS Tile ID(s)}
\usage{
getTile(x = NULL, tileH = NULL, tileV = NULL)
}
\arguments{
\item{x}{Extent information, see Details. Ignored when \code{tileH} and
\code{tileV} are specified.}

\item{tileH, tileV}{\code{numeric} or \code{character}. Horizontal and 
vertical tile number(s) (e.g., \code{tileH = 1:5}), see 
\url{https://nsidc.org/data/docs/daac/mod10_modis_snow/landgrid.html}.}
}
\value{
A \code{MODISextent} object.
}
\description{
Get MODIS tile ID(s) for a specific geographic area.
}
\details{
\describe{
\tabular{ll}{
  \code{x}:\cr
  \cr 
  
  If \code{character}:\cr
  \tab The country name of a \code{map} object (see \code{\link{map}}), you 
  can use \code{\link{search4map}} to find a map by regular expression.\cr
  \tab Or the file name (plus path) of a raster image or ESRI shapefile (shp).\cr
  \cr
  Other:\cr
  \tab If \code{Raster*}.\cr
  \tab Using a \code{Raster*} object as \code{extent}, the function 
  automatically determines the extent, resolution, and projection. This will 
  be used by \code{\link{runGdal}} creating perfectly matching files. If the 
  raster file has not a valid CRS string, LatLon is assumed.\cr
\tab Using an \code{extent} object, it must be in LatLon, as the extent 
object has no projection information attached.\cr
\tab If ESRI shapefile (shp) or \code{map} object, a call to 
\code{\link{over}} is performed to determine the MODIS tile containg the 
extent. This often considerably reduces the number of required tiles, but can 
lead to NO-DATA areas if not all tiles had to be downloaded in the bounding 
box of 'extent'! 
}
}

PS:\cr
If an extent is specified through \code{tileV, tileH} arguments, no cropping 
is performed and the full un-cutted tile(s) (if more than one then also 
mosaicked) is/are processed!
}
\note{
\strong{MODIS} does no longer support the tile identification and automated 
download of MERIS and SRTM data. At least as far as the latter is concerned, 
easy data access is granted through \code{\link{getData}}.
}
\examples{
\dontrun{
# ex 1 ############
# drawing the extent. NOTE: It is not possible to draw a date-line crossing area!
# draw extent with zoom, for smaller extents
getTile()

# ex 2 ############
# 'extent' specified with a 'Spatial*' object (taken from ?rgdal::readOGR)
dsn <- system.file("vectors/Up.tab", package = "rgdal")[1]
Up <- rgdal::readOGR(dsn, "Up")
getTile(x = Up)

# ex 3 ############
# with 'tileH' and 'tileV'
getTile(tileH = 18:19, tileV = 4)

# ex 4 ############
# with 'extent' or 'Raster*' object from "raster" package
rasterObject <- raster(xmn = 9.2, xmx = 17.47, ymn = 46.12, ymx = 49.3, 
                       crs = "+init=epsg:4326")
getTile(x = rasterObject)
getTile(x = extent(rasterObject))

# also works for projected data
rasterObject2 <- projectExtent(rasterObject, crs = "+init=epsg:32633")
getTile(x = rasterObject2)

# ex 5 #################
# Character name of a map contained in map("worldHires", plot = FALSE)$names
getTile(x = "Austria")
getTile(x = c("Austria", "Germany"))

# Search for specific map name patterns (use with caution):
m1 <- search4map("Per")
getTile(x = m1)

# Or use 'map' objects directly (remember to use map(..., fill = TRUE)): 
m2 <- map("state", region = c("new york", "new jersey", "penn"), fill = TRUE)
getTile(x = m2)
}

}
\seealso{
\code{\link{extent}}, \code{\link{map}}, \code{\link{search4map}}.
}
\author{
Matteo Mattiuzzi
}
