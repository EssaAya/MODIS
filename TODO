getProduct():
# improvement of automatic sensor detection 
# make a class modisproduct

transDate():
# add 'format' argument
# 'Date' method?

longer term changes:
- instead of having a ~/.MODISopts file create a directory where to store MODISopts, ftpsettings, product specfic info (instead of using the auxiliary folder)
- what about removing runMrt support?
- reduce the capability of functions eg:
    completely separate getHdf from runGdal (also getProduct, getCollection etc should be removed from those functions.
    This should allow runGdal to run in a more general manner like a input file list that is crunched. This should result in some more lines to code when using runGdal but is also allows more freedom and performance. AND last but not least at all also much easier handling of the package development.
- allow only one product at the time. At that moment is is possible to do runGdal(product="M.D13",... this would process all M.D 13 products in one go by walking down the list produced by getProduct("M.D13"). 
  MOD and MYD should still be run by one call, but not eg: MxD13A1 and MxD13A2. This change would simplify a lot the package development.
- I was quite good to avoid the creation of classes, I am not sure if we really need it...maybe yes? S3 should be enough I guess? 

any functions:
- 'quiet' argument -> should be part of options list automatically (?)
  
getHdf()
- 'HdfName' with regular expression 
comment Matteo: could be bit tricky:  
  1. the implementation as the unknown Julian date of production is always unknown.
  https://lpdaac.usgs.gov/dataset_discovery/modis 
  2. the use as a little mistake/imprecision would lead to huge differences in the output, and potentially costing a lot of exec time. 

detectBitInfo()
- recent products supported? (see whittaker.raster)

MODISoptions() 
- MODIS::MODISoptions() fails when package is not attached
  (Error in match.fun(FUN) : node stack overflow
   Error during wrapup: node stack overflow)

runGdal()
- following issue #15 (https://github.com/MatMatt/MODIS/issues/15), the runGdal 
  command included therein fails with a fresh installation of the MODIS package. 
  The corresponding error message is (possibly related to non-existing 
  'outDirPath'):
Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
In addition: Warning messages:
1: In dir.create(dir_aux) :
  cannot create dir 'C:\Users\fdetsch\Documents\MODIS_ARC\PROCESSED\.auxiliaries', reason 'No such file or directory'
2: In file.create(to[okay]) :
  cannot create file 'C:/Users/fdetsch/Documents/MODIS_ARC/PROCESSED/.auxiliaries//collections.RData', reason 'No such file or directory'
3: In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file 'C:/Users/fdetsch/Documents/MODIS_ARC/PROCESSED/.auxiliaries//collections.RData', probable reason 'No such file or directory'
- an 'HdfName' argument (just like in getHdf()) could be of advantage in the 
  sense that if one (or numerous) local .hdf file is specified, an online 
  retrieval (of collection, available dates, etc.) is entirely turned off
  
-getTile()
  we could consider to remove buffer to semplify the conding. Buffer could be done indipendently (not with MODIS). Benefits remove dep to rgeos, more freedom for users to apply a buffer.
  add keepGrid (or something along this line), which maintains the MODIS grid location also when using 'extent' (tileH,tileV arelady works like that) 
  
MODISoptions()
- here, a 'wait' argument could be helpful which may then be passed to getHdf, runGdal, etc. dynamically. This would also safe the additional parameter definition in each function supporting a 'wait' parameter.
